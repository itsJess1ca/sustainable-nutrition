/// Mixin printing a linear-gradient
/// as well as a plain color fallback 
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

@mixin patterned-linear-gradient($pattern-color, $direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }

  background: cross-pattern($pattern-color), nth(nth($color-stops, 1), 1);
  background: cross-pattern($pattern-color), -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: cross-pattern($pattern-color), linear-gradient($direction, $color-stops);
}

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
@mixin card($depth, $important:0) {
  @if $important == 1 {
    @if $depth < 1 {
      box-shadow: none !important;
    } @else if $depth > 5 {
      @warn "Invalid $depth `#{$depth}` for mixin `card`.";
    } @else {
      box-shadow: bottom-shadow($depth), top-shadow($depth) !important;
    }
  } @else {
    @if $depth < 1 {
      box-shadow: none;
    } @else if $depth > 5 {
      @warn "Invalid $depth `#{$depth}` for mixin `card`.";
    } @else {
      box-shadow: bottom-shadow($depth), top-shadow($depth);
    }
  }

}
